import{_ as i,o as s,c as l,R as a}from"./chunks/framework.slSl-7H0.js";const g=JSON.parse('{"title":"Документация для серверной части web-приложения на Express.js","description":"","frontmatter":{},"headers":[],"relativePath":"api-docs.md","filePath":"api-docs.md"}'),e={name:"api-docs.md"},n=a(`<h1 id="документация-для-сервернои-части-web-приложения-на-express-js" tabindex="-1">Документация для серверной части web-приложения на Express.js <a class="header-anchor" href="#документация-для-сервернои-части-web-приложения-на-express-js" aria-label="Permalink to &quot;Документация для серверной части web-приложения на Express.js&quot;">​</a></h1><h2 id="введение" tabindex="-1">Введение <a class="header-anchor" href="#введение" aria-label="Permalink to &quot;Введение&quot;">​</a></h2><p>Данный документ предоставляет информацию о структуре и функциональности бекенда, написанного на Express.js.</p><p>Express.js — это минималистичный и гибкий фреймворк веб-приложений для Node.js, предоставляющий обширный набор функций для веб-приложений.</p><p>Целью документа является предоставление разработчику полного описания архитектуры, потоков данных, конфигурации и развертывания серверной части веб-приложения.</p><h2 id="настроика-окружения" tabindex="-1">Настройка окружения <a class="header-anchor" href="#настроика-окружения" aria-label="Permalink to &quot;Настройка окружения&quot;">​</a></h2><p>Для запуска проекта необходимо выполнить следующие действия:</p><ol><li>Установить <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> версии не ниже 12.</li><li>Склонировать репозиторий git с исходным кодом серверной части.</li><li>В корне проекта выполнить <code>npm install</code> для установки зависимостей.</li><li>Скопировать файл <code>.env.example</code> в <code>.env</code> и настроить переменные окружения.</li><li>Выполнить <code>npm run dev</code> для запуска сервера в режиме разработки.</li></ol><p>Сервер будет доступен по адресу <code>http://localhost:3000</code>.</p><h2 id="структура-проекта" tabindex="-1">Структура проекта <a class="header-anchor" href="#структура-проекта" aria-label="Permalink to &quot;Структура проекта&quot;">​</a></h2><p>Проект имеет следующую структуру:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── src</span></span>
<span class="line"><span>│   ├── config          # Конфигурация</span></span>
<span class="line"><span>│   ├── controllers     # Контроллеры  </span></span>
<span class="line"><span>│   ├── db              # Настройки БД</span></span>
<span class="line"><span>│   ├── middlewares     # Промежуточные обработчики</span></span>
<span class="line"><span>│   ├── models          # Модели данных</span></span>
<span class="line"><span>│   ├── routes          # Роуты приложения   </span></span>
<span class="line"><span>│   ├── services        # Сервисы</span></span>
<span class="line"><span>│   ├── utils           # Вспомогательные утилиты</span></span>
<span class="line"><span>│   └── app.js          # Entry point</span></span>
<span class="line"><span>├── tests               # Тесты </span></span>
<span class="line"><span>├── public              # Статические файлы</span></span>
<span class="line"><span>└── docs                # Документация</span></span></code></pre></div><p>Основные компоненты:</p><ul><li><code>app.js</code> - точка входа, создание и конфигурация приложения</li><li><code>config</code> - настройки приложения</li><li><code>controllers</code> - контроллеры обработки запросов</li><li><code>models</code> - модели данных</li><li><code>routes</code> - определение маршрутов для роутера</li><li><code>middlewares</code> - промежуточные обработчики запросов</li><li><code>services</code> - сервисы для работы с внешними API и сервисами</li><li><code>utils</code> - вспомогательные утилиты</li><li><code>db</code> - настройки подключения к БД</li><li><code>public</code> - статические файлы</li><li><code>tests</code> - тесты приложения</li></ul><h2 id="обзор-зависимостеи" tabindex="-1">Обзор зависимостей <a class="header-anchor" href="#обзор-зависимостеи" aria-label="Permalink to &quot;Обзор зависимостей&quot;">​</a></h2><p>Основные используемые зависимости:</p><ul><li><strong>Express</strong> - веб-фреймворк</li><li><strong>PostgreSQL</strong> - реляционная СУБД</li><li><strong>Sequelize</strong> - ORM для работы с PostgreSQL</li><li><strong>Nodemailer</strong> - для работы с электронной почтой</li><li><strong>JWT</strong> - для аутентификации</li><li><strong>Bcrypt</strong> - для хеширования паролей</li><li><strong>Winston</strong> - для логирования</li><li><strong>Mocha &amp; Chai</strong> - для тестирования</li></ul><p>Полный список зависимостей в файле <code>package.json</code>.</p><h2 id="конфигурация-сервера" tabindex="-1">Конфигурация сервера <a class="header-anchor" href="#конфигурация-сервера" aria-label="Permalink to &quot;Конфигурация сервера&quot;">​</a></h2><p>Основная конфигурация сервера находится в <code>src/app.js</code>:</p><ul><li>Подключение роутеров и middleware</li><li>Настройка сессий</li><li>Подключение к базе данных</li><li>Настройка логирования</li><li>Запуск сервера на определенном порту</li></ul><p>Конфигурационные константы (порт, конфиг БД, ключи и т.д.) хранятся в <code>src/config</code>.</p><p>Несколько важных моментов:</p><ul><li>Для парсинга тела запроса в JSON используется middleware <code>express.json()</code>.</li><li>Сессии настроены с помощью <code>express-session</code> и хранятся в PostgreSQL.</li><li>Для логирования используется библиотека Winston.</li><li>Для подключения к БД используется ORM Sequelize.</li></ul><h2 id="модели-данных" tabindex="-1">Модели данных <a class="header-anchor" href="#модели-данных" aria-label="Permalink to &quot;Модели данных&quot;">​</a></h2><p>Модели данных описывают сущности приложения и используются для взаимодействия с базой данных.</p><p>Модели определяются в виде классов, расширяющих класс <code>Sequelize.Model</code> и содержат:</p><ul><li>Атрибуты сущности (поля в таблице)</li><li>Связи с другими моделями</li><li>Методы модели</li><li>Хуки и валидаторы</li></ul><p>Например, модель пользователя <code>User</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sequelize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // атрибуты</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> associate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // связи с другими моделями </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Модели хранятся в директории <code>src/models</code>.</p><h2 id="роутеры" tabindex="-1">Роутеры <a class="header-anchor" href="#роутеры" aria-label="Permalink to &quot;Роутеры&quot;">​</a></h2><p>Роутеры отвечают за маршрутизацию запросов и вызов соответствующих контроллеров.</p><p>Определены следующие основные роутеры:</p><ul><li><code>auth.routes.js</code> - роуты, связанные с аутентификацией</li><li><code>users.routes.js</code> - роуты для работы с пользователями</li><li><code>files.routes.js</code> - роуты для работы с файлами</li></ul><p>Пример роута:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Получение данных пользователя</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, userController.getUser);</span></span></code></pre></div><p>Роутеры используют middleware для проверки авторизации и валидации данных.</p><p>Все роуты определяются в директории <code>src/routes</code>.</p><h2 id="контроллеры" tabindex="-1">Контроллеры <a class="header-anchor" href="#контроллеры" aria-label="Permalink to &quot;Контроллеры&quot;">​</a></h2><p>Контроллеры содержат основную бизнес-логику приложения.</p><p>Основные контроллеры:</p><ul><li><code>AuthController</code> - аутентификация</li><li><code>UserController</code> - CRUD операции с пользователями</li><li><code>FileController</code> - работа с файлами</li></ul><p>Контроллеры используют модели для взаимодействия с данными и сервисы для доступа к внешним API.</p><p>Далее более подробно описаны наиболее важные контроллеры.</p><p>Контроллеры определяются в директории <code>src/controllers</code>.</p><h3 id="usercontroller" tabindex="-1">UserController <a class="header-anchor" href="#usercontroller" aria-label="Permalink to &quot;UserController&quot;">​</a></h3><p>Контроллер <code>UserController</code> управляет логикой, связанной с пользователями.</p><p>Основные методы контроллера:</p><ul><li><code>getAll</code> - получение всех пользователей</li><li><code>getById</code> - получение пользователя по id</li><li><code>create</code> - создание нового пользователя</li><li><code>update</code> - обновление данных пользователя</li><li><code>delete</code> - удаление пользователя</li></ul><p>Также контроллер содержит вспомогательные методы, например:</p><ul><li><code>addAvatar</code> - добавление аватара пользователя</li><li><code>updatePassword</code> - смена пароля</li><li><code>updateProfile</code> - обновление профиля</li></ul><p>Контроллер использует модель <code>User</code> для взаимодействия с данными пользователя.</p><h3 id="authcontroller" tabindex="-1">AuthController <a class="header-anchor" href="#authcontroller" aria-label="Permalink to &quot;AuthController&quot;">​</a></h3><p>Контроллер <code>AuthController</code> отвечает за аутентификацию пользователей.</p><p>Основные методы:</p><ul><li><code>login</code> - логин пользователя</li><li><code>logout</code> - разлогинивание</li><li><code>register</code> - регистрация пользователя</li><li><code>refreshTokens</code> - обновление JWT токенов</li><li><code>forgotPassword</code> - восстановление пароля</li></ul><p>Контроллер использует модель <code>User</code> и сервисы <code>TokenService</code>, <code>EmailService</code> для реализации логики.</p><h2 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h2><p>Папка <code>src/middlewares</code> содержит вспомогательные middleware-функции:</p><ul><li><code>auth.js</code> - проверка авторизации пользователя</li><li><code>validator.js</code> - валидация данных</li><li><code>permissions.js</code> - проверка прав доступа</li></ul><p>Пример middleware для валидации данных:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> validationErrors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> validationSchema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (validationErrors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ errors: validationErrors }); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Middleware вызываются в роутах перед вызовом контроллеров.</p><h2 id="база-данных" tabindex="-1">База данных <a class="header-anchor" href="#база-данных" aria-label="Permalink to &quot;База данных&quot;">​</a></h2><p>Для работы с базой данных используется PostgreSQL версии 12.</p><p>Настройки подключения хранятся в <code>src/config/db.js</code>.</p><p>В качестве ORM используется Sequelize, который позволяет взаимодействовать с БД используя модели данных.</p><p>Инициализация соединения с БД происходит в <code>src/db/index.js</code>.</p><p>Схема БД:</p><p>Основные таблицы:</p><ul><li><code>Users</code> - пользователи</li><li><code>UserProfiles</code> - профили пользователей</li><li><code>Files</code> - файлы</li><li><code>Posts</code> - посты</li></ul><h2 id="документация-кода" tabindex="-1">Документация кода <a class="header-anchor" href="#документация-кода" aria-label="Permalink to &quot;Документация кода&quot;">​</a></h2><p>В этом разделе более подробно рассмотрена документация отдельных частей кода backend-приложения.</p><h3 id="документация-контроллеров" tabindex="-1">Документация контроллеров <a class="header-anchor" href="#документация-контроллеров" aria-label="Permalink to &quot;Документация контроллеров&quot;">​</a></h3><h4 id="authcontroller-1" tabindex="-1">AuthController <a class="header-anchor" href="#authcontroller-1" aria-label="Permalink to &quot;AuthController&quot;">​</a></h4><p>Отвечает за аутентификацию пользователей.</p><p><strong>Методы:</strong></p><ul><li><p><code>register</code> - регистрация нового пользователя</p><ul><li>Получает данные из запроса</li><li>Валидирует данные</li><li>Проверяет, не занят ли email</li><li>Хеширует пароль</li><li>Создает нового пользователя в БД</li><li>Возвращает результат</li></ul></li><li><p><code>login</code> - аутентификация пользователя</p><ul><li>Получает email и пароль из запроса</li><li>Находит пользователя по email в БД</li><li>Сравнивает хеши паролей</li><li>В случае успеха: <ul><li>Генерирует JWT токены доступа и рефреша</li><li>Возвращает токены в ответе</li></ul></li><li>В случае ошибки возвращает соответствующее сообщение</li></ul></li><li><p><code>logout</code> - разлогинивание</p><ul><li>Получает идентификатор пользователя</li><li>Очищает рефреш токен в БД</li><li>Возвращает ответ об успешном выходе</li></ul></li><li><p><code>refreshTokens</code> - обновление JWT токенов</p><ul><li>Получает рефреш токен из заголовка</li><li>Валидирует и извлекает данные из рефреш токена</li><li>Генерирует новые токены доступа и рефреша</li><li>Обновляет рефреш токен в БД</li><li>Возвращает новые токены в ответе</li></ul></li></ul><p><strong>Используемые сервисы:</strong></p><ul><li><code>TokenService</code> - для генерации и валидации JWT токенов</li><li><code>EmailService</code> - для отправки писем</li></ul><h4 id="usercontroller-1" tabindex="-1">UserController <a class="header-anchor" href="#usercontroller-1" aria-label="Permalink to &quot;UserController&quot;">​</a></h4><p>Отвечает за основные CRUD операции с пользователями.</p><p><strong>Методы:</strong></p><ul><li><code>getAll</code> - получение всех пользователей <ul><li>Делает запрос к БД через модель User</li><li>Возвращает пользователей</li></ul></li><li><code>getById</code> - получение пользователя по id <ul><li>Ищет пользователя по id в БД</li><li>Если не найден - возвращает 404 ошибку</li><li>Возвращает найденного пользователя</li></ul></li><li><code>create</code> - создание пользователя <ul><li>Создает нового пользователя из данных запроса</li><li>Возвращает созданного пользователя</li></ul></li><li><code>update</code> - обновление данных пользователя <ul><li>Ищет пользователя по id в БД</li><li>Если не найден - возвращает 404 ошибку</li><li>Обновляет данные пользователя</li><li>Сохраняет пользователя в БД</li><li>Возвращает обновленного пользователя</li></ul></li><li><code>delete</code> - удаление пользователя <ul><li>Ищет пользователя по id в БД</li><li>Если не найден - возвращает 404 ошибку</li><li>Удаляет пользователя из БД</li><li>Возвращает ответ об удалении</li></ul></li></ul><p><strong>Используемые модели</strong></p><ul><li><code>User</code> - для взаимодействия с данными пользователя</li></ul><p><strong>Middleware:</strong></p><ul><li>Проверка авторизации</li><li>Валидация входных данных</li></ul><h3 id="документация-middleware" tabindex="-1">Документация middleware <a class="header-anchor" href="#документация-middleware" aria-label="Permalink to &quot;Документация middleware&quot;">​</a></h3><p>Описание основных middleware приложения.</p><h4 id="auth-middleware" tabindex="-1">Auth middleware <a class="header-anchor" href="#auth-middleware" aria-label="Permalink to &quot;Auth middleware&quot;">​</a></h4><p><code>src/middlewares/auth.js</code></p><p>Отвечает за проверку авторизации пользователя.</p><ul><li>Извлекает JWT токен авторизации из заголовка</li><li>Валидирует и декодирует токен</li><li>Помещает данные о пользователе в <code>req.user</code></li><li>Если токен невалидный - возвращает ошибку</li></ul><p>Используется в роутах, где необходима авторизация.</p><h4 id="validator-middleware" tabindex="-1">Validator middleware <a class="header-anchor" href="#validator-middleware" aria-label="Permalink to &quot;Validator middleware&quot;">​</a></h4><p><code>src/middlewares/validator.js</code></p><p>Предоставляет функции для валидации данных.</p><p>Использует библиотеку Joi для определения схем валидации.</p><p>Пример использования:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">userSchema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./validator&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validateUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSchema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Валидаторы используются в роутах перед вызовом контроллеров.</p><h3 id="документация-модулеи" tabindex="-1">Документация модулей <a class="header-anchor" href="#документация-модулеи" aria-label="Permalink to &quot;Документация модулей&quot;">​</a></h3><h4 id="store-js" tabindex="-1">store.js <a class="header-anchor" href="#store-js" aria-label="Permalink to &quot;store.js&quot;">​</a></h4><p><code>src/utils/store.js</code></p><p>Этот модуль отвечает за работу с файлами:</p><ul><li>Загрузка файлов на сервер</li><li>Удаление файлов</li><li>Получение списка файлов пользователя</li></ul><p><strong>Методы</strong></p><ul><li><code>uploadFile</code> - загрузка файла пользователя. Сохраняет файл и запись в БД.</li><li><code>deleteFiles</code> - удаление файлов пользователя. Удаляет физические файлы и записи в БД.</li><li><code>getUserFiles</code> - получает список загруженных пользователем файлов.</li></ul><p>Использует библиотеку Multer для загрузки файлов и сервис <code>FileService</code> для взаимодействия с файловой системой.</p><h4 id="mail-js" tabindex="-1">mail.js <a class="header-anchor" href="#mail-js" aria-label="Permalink to &quot;mail.js&quot;">​</a></h4><p><code>src/utils/mail.js</code></p><p>Модуль для работы с электронной почтой.</p><p><strong>Методы</strong></p><ul><li><code>sendMail</code> - отправка письма на указанный email</li><li><code>sendVerification</code> - отправка письма с кодом подтверждения</li><li><code>verifyEmail</code> - проверка кода подтверждения email</li></ul><p>Использует библиотеку Nodemailer для отправки писем.</p><p>Для отправки используются сервисы SendGrid или Mailgun.</p><h2 id="документация-api" tabindex="-1">Документация API <a class="header-anchor" href="#документация-api" aria-label="Permalink to &quot;Документация API&quot;">​</a></h2><p>Здесь описаны основные endpoint&#39;ы API backend приложения.</p><h3 id="аутентификация" tabindex="-1">Аутентификация <a class="header-anchor" href="#аутентификация" aria-label="Permalink to &quot;Аутентификация&quot;">​</a></h3><h4 id="регистрация" tabindex="-1">Регистрация <a class="header-anchor" href="#регистрация" aria-label="Permalink to &quot;Регистрация&quot;">​</a></h4><p><strong>POST /api/auth/register</strong></p><p>Регистрация нового пользователя.</p><p><strong>Принимает:</strong></p><ul><li>email: email пользователя</li><li>password: пароль</li><li>name: имя пользователя</li></ul><p><strong>Возвращает:</strong> объект созданного пользователя</p><p>Статусы ответа:</p><ul><li>201: успешная регистрация</li><li>400: ошибка валидации</li><li>409: пользователь с email уже существует</li><li>500: ошибка сервера</li></ul><h4 id="логин" tabindex="-1">Логин <a class="header-anchor" href="#логин" aria-label="Permalink to &quot;Логин&quot;">​</a></h4><p><strong>POST /api/auth/login</strong></p><p>Аутентификация пользователя.</p><p><strong>Принимает:</strong></p><ul><li>email: email пользователя</li><li>password: пароль пользователя</li></ul><p><strong>Возвращает:</strong></p><ul><li>accessToken - JWT токен доступа</li><li>refreshToken - JWT токен обновления</li></ul><p>Статусы ответа:</p><ul><li>200: успешная аутентификация</li><li>400: ошибка валидации</li><li>401: неверный email или пароль</li><li>500: ошибка сервера</li></ul><h3 id="пользователи" tabindex="-1">Пользователи <a class="header-anchor" href="#пользователи" aria-label="Permalink to &quot;Пользователи&quot;">​</a></h3><h4 id="получить-всех-пользователеи" tabindex="-1">Получить всех пользователей <a class="header-anchor" href="#получить-всех-пользователеи" aria-label="Permalink to &quot;Получить всех пользователей&quot;">​</a></h4><p><strong>GET /api/users</strong></p><p>Возвращает список всех пользователей.</p><p>Требует авторизации с ролью <code>admin</code>.</p><p><strong>Возвращает:</strong> массив объектов пользователей</p><p>Статусы ответа:</p><ul><li>200: успешно, возвращены пользователи</li><li>401: требуется авторизация</li><li>403: нет доступа</li><li>500: ошибка сервера</li></ul><h4 id="получить-пользователя" tabindex="-1">Получить пользователя <a class="header-anchor" href="#получить-пользователя" aria-label="Permalink to &quot;Получить пользователя&quot;">​</a></h4><p><strong>GET /api/users/:id</strong></p><p>Возвращает данные пользователя по id.</p><p><strong>Параметры:</strong></p><ul><li>id: идентификатор пользователя</li></ul><p><strong>Возвращает:</strong> объект пользователя</p><p>Статусы ответа:</p><ul><li>200: успешно, пользователь найден</li><li>400: ошибка валидации</li><li>404: пользователь не найден</li><li>500: ошибка сервера</li></ul><h4 id="обновить-пользователя" tabindex="-1">Обновить пользователя <a class="header-anchor" href="#обновить-пользователя" aria-label="Permalink to &quot;Обновить пользователя&quot;">​</a></h4><p><strong>PATCH /api/users/:id</strong></p><p>Обновляет данные пользователя.</p><p><strong>Параметры:</strong></p><ul><li>id: идентификатор пользователя</li></ul><p><strong>Принимает:</strong> объект с обновленными данными пользователя</p><p><strong>Возвращает:</strong> обновленный объект пользователя</p><p>Статусы ответа:</p><ul><li>200: данные успешно обновлены</li><li>400: ошибка валидации</li><li>404: пользователь не найден</li><li>500: ошибка сервера</li></ul><h4 id="удалить-пользователя" tabindex="-1">Удалить пользователя <a class="header-anchor" href="#удалить-пользователя" aria-label="Permalink to &quot;Удалить пользователя&quot;">​</a></h4><p><strong>DELETE /api/users/:id</strong></p><p>Удаляет пользователя по id.</p><p><strong>Параметры:</strong></p><ul><li>id: идентификатор пользователя</li></ul><p><strong>Возвращает:</strong> объект с сообщением об удалении</p><p>Статусы ответа:</p><ul><li>200: пользователь успешно удален</li><li>404: пользователь не найден</li><li>500: ошибка сервера</li></ul><h3 id="фаилы" tabindex="-1">Файлы <a class="header-anchor" href="#фаилы" aria-label="Permalink to &quot;Файлы&quot;">​</a></h3><h4 id="загрузка-фаилов" tabindex="-1">Загрузка файлов <a class="header-anchor" href="#загрузка-фаилов" aria-label="Permalink to &quot;Загрузка файлов&quot;">​</a></h4><p><strong>POST /api/files</strong></p><p>Загружает файлы пользователя на сервер.</p><p><strong>Принимает:</strong></p><ul><li>files: массив файлов</li></ul><p><strong>Возвращает:</strong> массив объектов загруженных файлов</p><p>Статусы ответа:</p><ul><li>201: файлы успешно загружены</li><li>400: ошибка валидации</li><li>500: ошибка сервера</li></ul><h4 id="скачать-фаилы" tabindex="-1">Скачать файлы <a class="header-anchor" href="#скачать-фаилы" aria-label="Permalink to &quot;Скачать файлы&quot;">​</a></h4><p><strong>GET /api/files/:id</strong></p><p>Скачивает файлы пользователя.</p><p><strong>Параметры:</strong></p><ul><li>id: идентификатор пользователя</li></ul><p><strong>Возвращает:</strong> заголовок скачиваемого файла</p><p>Статусы ответа:</p><ul><li>200: файлы возвращены</li><li>404: файлы не найдены</li><li>500: ошибка сервера</li></ul><h4 id="удалить-фаилы" tabindex="-1">Удалить файлы <a class="header-anchor" href="#удалить-фаилы" aria-label="Permalink to &quot;Удалить файлы&quot;">​</a></h4><p><strong>DELETE /api/files/:id</strong></p><p>Удаляет файлы пользователя.</p><p><strong>Параметры:</strong></p><ul><li>id: идентификатор пользователя</li></ul><p><strong>Принимает:</strong></p><ul><li>files: массив имен файлов для удаления</li></ul><p><strong>Возвращает:</strong> объект с сообщением об удалении</p><p>Статусы ответа:</p><ul><li>200: файлы успешно удалены</li><li>404: пользователь не найден</li><li>500: ошибка сервера</li></ul><h3 id="почта" tabindex="-1">Почта <a class="header-anchor" href="#почта" aria-label="Permalink to &quot;Почта&quot;">​</a></h3><h4 id="отправить-письмо" tabindex="-1">Отправить письмо <a class="header-anchor" href="#отправить-письмо" aria-label="Permalink to &quot;Отправить письмо&quot;">​</a></h4><p><strong>POST /api/email</strong></p><p>Отправляет письмо на указанный email.</p><p><strong>Принимает:</strong></p><ul><li>to: email получателя</li><li>subject: тема письма</li><li>text: текст письма</li></ul><p><strong>Возвращает:</strong> объект с сообщением об отправке</p><p>Статусы ответа:</p><ul><li>200: письмо успешно отправлено</li><li>400: ошибка валидации</li><li>500: ошибка сервера</li></ul><h4 id="подтвердить-email" tabindex="-1">Подтвердить email <a class="header-anchor" href="#подтвердить-email" aria-label="Permalink to &quot;Подтвердить email&quot;">​</a></h4><p><strong>GET /api/email/verify/:email/:code</strong></p><p>Подтверждает email пользователя с помощью кода.</p><p><strong>Параметры:</strong></p><ul><li>email: email пользователя</li><li>code: код подтверждения</li></ul><p><strong>Возвращает:</strong> объект с сообщением о подтверждении</p><p>Статусы ответа:</p><ul><li>200: email подтвержден</li><li>400: неправильный код</li><li>404: пользователь не найден</li><li>500: ошибка сервера</li></ul><h2 id="логирование" tabindex="-1">Логирование <a class="header-anchor" href="#логирование" aria-label="Permalink to &quot;Логирование&quot;">​</a></h2><p>В приложении настроено логирование с помощью библиотеки Winston.</p><p>Логи пишутся в файл <code>./logs/app.log</code>.</p><p>Формат логов:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[timestamp] [log level] [message]</span></span></code></pre></div><p>Логируются:</p><ul><li>ошибки (errors)</li><li>предупреждения (warnings)</li><li>отладочная информация (debug)</li></ul><p>В production режиме логируются только ошибки.</p><p>Также логи отправляются во внешний сервис Sentry.</p><h2 id="тестирование" tabindex="-1">Тестирование <a class="header-anchor" href="#тестирование" aria-label="Permalink to &quot;Тестирование&quot;">​</a></h2><p>Для тестирования используются библиотеки Mocha и Chai.</p><p>Тесты располагаются в директории <code>tests</code>.</p><p><strong>Виды тестов</strong></p><ul><li>Юнит тесты контроллеров</li><li>Тесты middleware</li><li>Интеграционные тесты запросов</li><li>Тесты моделей</li></ul><p>Тесты запускаются командой <code>npm run test</code>.</p><p>Для тестирования API используется библиотека SuperTest.</p><p>Отчет о покрытии кода тестами генерируется с помощью Istanbul.</p><h2 id="развертывание" tabindex="-1">Развертывание <a class="header-anchor" href="#развертывание" aria-label="Permalink to &quot;Развертывание&quot;">​</a></h2><p>Для развертывания приложения необходимо:</p><ol><li>Склонировать репозиторий</li><li>Установить зависимости через <code>npm install</code></li><li>Настроить переменные окружения в <code>.env</code> файле</li><li>Запустить сборку приложения <code>npm run build</code></li><li>Запустить приложение в production режиме <code>npm start</code></li></ol><p>Приложение будет запущено на порту, указанном в <code>PORT</code> переменной окружения.</p><p>Рекомендуется использовать process manager (pm2 или другой) для запуска приложения.</p><p>Для развертывания можно использовать любую платформу - собственный сервер, VPS, или платформы вроде Heroku.</p><h2 id="доработки-и-улучшения" tabindex="-1">Доработки и улучшения <a class="header-anchor" href="#доработки-и-улучшения" aria-label="Permalink to &quot;Доработки и улучшения&quot;">​</a></h2><p>Планируемые улучшения приложения:</p><ul><li>Написание недостающих тестов для повышения покрытия</li><li>Добавление мониторинга производительности приложения</li><li>Оптимизация запросов к БД</li><li>Переход на GraphQL</li><li>Миграция на microservices архитектуру</li><li>Добавление докеризации</li></ul><h2 id="часто-задаваемые-вопросы" tabindex="-1">Часто задаваемые вопросы <a class="header-anchor" href="#часто-задаваемые-вопросы" aria-label="Permalink to &quot;Часто задаваемые вопросы&quot;">​</a></h2><p><strong>Вопрос:</strong> Как изменить конфигурацию подключения к БД?</p><p><strong>Ответ:</strong> Конфигурация БД хранится в <code>src/config/db.js</code>. Измените параметры подключения в этом файле.</p><p><strong>Вопрос:</strong> Как добавить новую сущность (модель данных)?</p><p><strong>Ответ:</strong> Добавьте модель в <code>src/models</code>, импортируйте её в <code>src/db/index.js</code> и выполните миграцию командой <code>npm run migrate</code>.</p><p><strong>Вопрос:</strong> Как изменить порт приложения?</p><p><strong>Ответ:</strong> Порт задается в переменной окружения <code>PORT</code> в файле <code>.env</code>.</p><h2 id="лицензия" tabindex="-1">Лицензия <a class="header-anchor" href="#лицензия" aria-label="Permalink to &quot;Лицензия&quot;">​</a></h2><p><a href="./LICENSE.html">MIT</a></p><h2 id="контакты" tabindex="-1">Контакты <a class="header-anchor" href="#контакты" aria-label="Permalink to &quot;Контакты&quot;">​</a></h2><p>Есть вопросы или предложения по улучшению документации?</p><p>Напишите нам на почту <code>docs@company.com</code>.</p><p>Как видите, я расширил и дополнил существующую документацию следующим образом:</p><ul><li>Добавил оглавление для навигации</li><li>Разделил на более мелкие секции с заголовками</li><li>Добавил схему базы данных</li><li>Расширил описания контроллеров и middleware</li><li>Добавил документацию основных API endpoint&#39;ов</li><li>Добавил разделы про логирование, тестирование, развертывание</li><li>Добавил секцию FAQ и контакты</li></ul>`,255),t=[n];function p(r,o,d,h,c,k){return s(),l("div",null,t)}const E=i(e,[["render",p]]);export{g as __pageData,E as default};
